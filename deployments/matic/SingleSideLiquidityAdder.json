{
  "address": "0xac722f14Fcf4dac86DEA47a7b80daE72d456CB05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rooted",
          "type": "address"
        },
        {
          "internalType": "contract RootedTransferGate",
          "name": "_gate",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pairedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "addSingleSideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_canControl",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RootedTransferGate",
          "name": "_gate",
          "type": "address"
        }
      ],
      "name": "updateGate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x344bee54ba0295481f8d105f7a95c0bd4e0d6ae29d52c96c0b016d4b929f5462",
  "receipt": {
    "to": null,
    "from": "0xBd57Dac98f75c9Db5f18ffA13E7eaf48b4A5Bb70",
    "contractAddress": "0xac722f14Fcf4dac86DEA47a7b80daE72d456CB05",
    "transactionIndex": 0,
    "gasUsed": "811967",
    "logsBloom": "0x
    "blockHash": "0x0d631911a5ab3e745e17d6954fc2e723526ce90b2505080a6b60a2862ece6a06",
    "transactionHash": "0x344bee54ba0295481f8d105f7a95c0bd4e0d6ae29d52c96c0b016d4b929f5462",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 38925431,
        "transactionHash": "0x344bee54ba0295481f8d105f7a95c0bd4e0d6ae29d52c96c0b016d4b929f5462",
        "address": "0xe6a11F125a834E0676F3f8f33eb347D4e1938264",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ac722f14fcf4dac86dea47a7b80dae72d456cb05",
          "0x000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x0d631911a5ab3e745e17d6954fc2e723526ce90b2505080a6b60a2862ece6a06"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 38925431,
        "transactionHash": "0x344bee54ba0295481f8d105f7a95c0bd4e0d6ae29d52c96c0b016d4b929f5462",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bd57dac98f75c9db5f18ffa13e7eaf48b4a5bb70",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x00000000000000000000000000000000000000000000000006446c487c8428360000000000000000000000000000000000000000000000ed4a1c3a70c13cbd7c000000000000000000000000000000000000000000000684b08d8904a8be02710000000000000000000000000000000000000000000000ed43d7ce2844b89546000000000000000000000000000000000000000000000684b6d1f54d25422aa7",
        "logIndex": 1,
        "blockHash": "0x0d631911a5ab3e745e17d6954fc2e723526ce90b2505080a6b60a2862ece6a06"
      }
    ],
    "blockNumber": 38925431,
    "cumulativeGasUsed": "811967",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe6a11F125a834E0676F3f8f33eb347D4e1938264",
    "0x155C027cAA72235F6d1429D1ee2C8Ce99187394c",
    "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff"
  ],
  "numDeployments": 1,
  "solcInputHash": "7794fa4267d03d391ef8b1bf28c03968",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rooted\",\"type\":\"address\"},{\"internalType\":\"contract RootedTransferGate\",\"name\":\"_gate\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pairedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addSingleSideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canControl\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RootedTransferGate\",\"name\":\"_gate\",\"type\":\"address\"}],\"name\":\"updateGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleSideLiquidityAdder.sol\":\"SingleSideLiquidityAdder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x8a2fdbc25e22c95dce8da7c8d704ef5322fc11ccfc930e2b5c2e6c2bdb80c8dd\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/BlackListRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\nimport \\\"./Owned.sol\\\";\\n\\ncontract BlackListRegistry is Owned\\n{\\n    mapping (address => bool) public blackList;\\n    \\n    function setBlackListed(address account, bool blackListed) public ownerOnly()\\n    {\\n        blackList[account] = blackListed;\\n    }\\n}\",\"keccak256\":\"0x6f0dab2be683fa447d6b50dbd0c5a1c19649d640a1628fec78de1491ecdb299f\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/FreeParticipantRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\nimport \\\"./Owned.sol\\\";\\n\\ncontract FreeParticipantRegistry is Owned\\n{\\n    address transferGate;\\n    mapping (address => bool) public freeParticipantControllers;\\n    mapping (address => bool) public freeParticipant;\\n\\n    modifier transferGateOnly()\\n    {\\n        require (msg.sender == transferGate, \\\"Transfer Gate only\\\");\\n        _;\\n    }\\n\\n    function setTransferGate(address _transferGate) public ownerOnly()\\n    {\\n        transferGate = _transferGate;\\n    }\\n\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public transferGateOnly()\\n    {\\n        freeParticipantControllers[freeParticipantController] = allow;\\n    }\\n\\n    function setFreeParticipant(address participant, bool free) public transferGateOnly()\\n    {\\n        freeParticipant[participant] = free;\\n    }\\n}\",\"keccak256\":\"0x886039f47f479c9df29f0164878f6fc10b473375b39fb36995b7730a0aa51070\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\ninterface IERC20 \\n{\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x686935694b8075dd535c64bd63dbb9a5fbc720e11143819c6fe2cbfa194e7610\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/ILiquidityLockedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\ninterface ILiquidityLockedERC20\\n{\\n    function setLiquidityLock(IUniswapV2Pair _liquidityPair, bool _locked) external;\\n}\",\"keccak256\":\"0x1d53fa69ac8c1ddb2dd706c39fd581fefeeab1e3795e39414cdeb0ba26d36cdc\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\ninterface IOwned\\n{\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n    function claimOwnership() external;\\n}\",\"keccak256\":\"0xc359bb32bf2da96347d1b9a49ac4db7376cfe150a606ec808a5d758a465ee3e0\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/ITokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ITokensRecoverable\\n{\\n    function recoverTokens(IERC20 token) external;\\n}\",\"keccak256\":\"0x739d2acb80e96298bcf576c736e45f6c0df9167ff2e6e14f1cc009e700ec0cdb\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/ITransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\ninterface ITransferGate\\n{\\n    function feeSplitter() external view returns (address);\\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external returns (uint256);\\n}\",\"keccak256\":\"0x0cdf5a8d3b86453c35af1c62f27f8182edcad68de009ebcfb423af7fa41aada4\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.4;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x02e97c5280dc3f9fcb05871dc67e415e4df5e929a633187d29e0a60f117a2332\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x6da01833942916c9679167e1ecf2365b6d6af6b8edc15bc984f108c16a5c6ca2\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.4;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x92991e75837dba663da42cefdcf443e0f6db0a9e7ed8562057b5ff111b0b5d6a\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\n/* ROOTKIT:\\nProvides ownerOnly() modifier\\nAllows for ownership transfer but requires the new\\nowner to claim (accept) ownership\\nSafer because no accidental transfers or renouncing\\n*/\\n\\nimport \\\"./IOwned.sol\\\";\\n\\nabstract contract Owned is IOwned\\n{\\n    address public override owner = msg.sender;\\n    address internal pendingOwner;\\n\\n    modifier ownerOnly()\\n    {\\n        require (msg.sender == owner, \\\"Owner only\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public override ownerOnly()\\n    {\\n        pendingOwner = newOwner;\\n    }\\n\\n    function claimOwnership() public override\\n    {\\n        require (pendingOwner == msg.sender);\\n        pendingOwner = address(0);\\n        emit OwnershipTransferred(owner, msg.sender);\\n        owner = msg.sender;\\n    }\\n}\",\"keccak256\":\"0x32a0ae294ac89943fbfb30c5de406ff0edc6d5295133cf5fa702a82cda18a89d\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/RootedTransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\n/* ROOTKIT:\\nA transfer gate (GatedERC20) for use with upTokens\\n\\nIt:\\n    Allows customization of tax and burn rates\\n    Allows transfer to/from approved pools\\n    Disallows transfer to/from non-approved pools\\n    Allows transfer to/from anywhere else\\n    Allows for free transfers if permission granted\\n    Allows for unrestricted transfers if permission granted\\n    Allows for a pool to have an extra tax\\n    Allows for a temporary declining tax\\n*/\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./ILiquidityLockedERC20.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./TokensRecoverable.sol\\\";\\nimport \\\"./ITransferGate.sol\\\";\\nimport \\\"./FreeParticipantRegistry.sol\\\";\\nimport \\\"./BlackListRegistry.sol\\\";\\n\\ncontract RootedTransferGate is TokensRecoverable, ITransferGate\\n{   \\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 immutable internal uniswapRouter;\\n    ILiquidityLockedERC20 immutable internal rootedToken;\\n\\n    bool public unrestricted;\\n    mapping (address => bool) public unrestrictedControllers;\\n    mapping (address => bool) public feeControllers;\\n    mapping (address => uint16) public poolsTaxRates;\\n\\n    address public override feeSplitter;\\n    uint16 public feesRate;\\n    IUniswapV2Pair public mainPool;\\n    FreeParticipantRegistry public freeParticipantRegistry;\\n    BlackListRegistry public blackListRegistry;\\n   \\n    uint16 public dumpTaxStartRate; \\n    uint256 public dumpTaxDurationInSeconds;\\n    uint256 public dumpTaxEndTimestamp;\\n\\n    constructor(ILiquidityLockedERC20 _rootedToken, IUniswapV2Router02 _uniswapRouter)\\n    {\\n        rootedToken = _rootedToken;\\n        uniswapRouter = _uniswapRouter;\\n    }\\n\\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\\n    {\\n        unrestrictedControllers[unrestrictedController] = allow;\\n    }\\n    \\n    function setFeeControllers(address feeController, bool allow) public ownerOnly()\\n    {\\n        feeControllers[feeController] = allow;\\n    }\\n\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\\n    {\\n        freeParticipantRegistry.setFreeParticipantController(freeParticipantController, allow);\\n    }\\n\\n    function setFreeParticipant(address participant, bool free) public\\n    {\\n        require (msg.sender == owner || freeParticipantRegistry.freeParticipantControllers(msg.sender), \\\"Not an owner or free participant controller\\\");\\n        freeParticipantRegistry.setFreeParticipant(participant, free);\\n    }\\n\\n    function setFeeSplitter(address _feeSplitter) public ownerOnly()\\n    {\\n        feeSplitter = _feeSplitter;\\n    }\\n\\n    function setUnrestricted(bool _unrestricted) public\\n    {\\n        require (unrestrictedControllers[msg.sender], \\\"Not an unrestricted controller\\\");\\n        unrestricted = _unrestricted;\\n        rootedToken.setLiquidityLock(mainPool, !_unrestricted);\\n    }\\n\\n    function setFreeParticipantRegistry(FreeParticipantRegistry _freeParticipantRegistry) public ownerOnly()\\n    {\\n        freeParticipantRegistry = _freeParticipantRegistry;\\n    }\\n\\n    function setBlackListRegistry(BlackListRegistry _blackListRegistry) public ownerOnly()\\n    {\\n        blackListRegistry = _blackListRegistry;\\n    }\\n\\n    function setMainPool(IUniswapV2Pair _mainPool) public ownerOnly()\\n    {\\n        mainPool = _mainPool;\\n    }\\n\\n     function setPoolTaxRate(address pool, uint16 taxRate) public ownerOnly()\\n    {\\n        require (taxRate <= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\n        poolsTaxRates[pool] = taxRate;        \\n    }\\n\\n    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\\n    {\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\n        require (startTaxRate <= 10000, \\\"Dump tax rate must be less than or equal to 100%\\\");\\n\\n        dumpTaxStartRate = startTaxRate;\\n        dumpTaxDurationInSeconds = durationInSeconds;\\n        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\\n    }\\n\\n    function getDumpTax() public view returns (uint256)\\n    {\\n        if (block.timestamp >= dumpTaxEndTimestamp) \\n        {\\n            return 0;\\n        }       \\n        \\n        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\\n    }\\n\\n    function setFees(uint16 _feesRate) public\\n    {\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\n        require (_feesRate <= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\n        feesRate = _feesRate;\\n    }\\n\\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256)\\n    {\\n        if (unrestricted || freeParticipantRegistry.freeParticipant(from) || freeParticipantRegistry.freeParticipant(to)) \\n        {\\n            return 0;\\n        }\\n\\n        if (blackListRegistry.blackList(from) || blackListRegistry.blackList(to))\\n        {\\n            return amount;\\n        }\\n\\n        uint16 poolTaxRate = poolsTaxRates[to];\\n\\n        if (poolTaxRate > feesRate) \\n        {\\n            uint256 totalTax = getDumpTax() + poolTaxRate;\\n            return totalTax >= 10000 ? amount : amount * totalTax / 10000;\\n        }\\n\\n        return amount * feesRate / 10000;\\n    }   \\n}\",\"keccak256\":\"0xcdb92301662899066b492649e255f576389ac0db3ab4190bab47e897e12a5f0d\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\n/* ROOTKIT:\\nModified to remove some junk\\nAlso modified to remove silly restrictions (traps!) within safeApprove\\n*/\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x3f7361be3d553e5eb15d84b652578d89911db8e744de78bd990f1d3cbf7c065e\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\nlibrary SafeMath \\n{\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \\n    {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \\n    {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\n    {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \\n    {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) \\n        {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \\n    {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\n    {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \\n    {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\n    {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xfc5368962f37ca7239c0f1c40cb7bee593a2d20e58163b0ff131312a288d39eb\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/SingleSideLiquidityAdder.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\nimport \\\"./TokensRecoverable.sol\\\";\\nimport \\\"./RootedTransferGate.sol\\\";\\n\\n// Contract to add 1 sided liquidty after buys via \\n// selling and setting the \\\"to\\\" address as the pool\\n\\ncontract SingleSideLiquidityAdder is TokensRecoverable {    \\n    \\n    IUniswapV2Router02 immutable private uniswapRouter;\\n    RootedTransferGate private gate;\\n    IERC20 immutable private rooted;\\n    mapping (address => bool) controllers;\\n    \\n    constructor (IERC20 _rooted, RootedTransferGate _gate, IUniswapV2Router02 _uniswapRouter) {\\n        rooted = _rooted;\\n        gate = _gate;\\n        uniswapRouter = _uniswapRouter;\\n        _rooted.approve(address(_uniswapRouter), uint(-1));\\n    }\\n\\n    function setController(address _controller, bool _canControl) public ownerOnly() {\\n        controllers[_controller] = _canControl;\\n    }\\n\\n    function updateGate(RootedTransferGate _gate) public ownerOnly() {\\n        gate = _gate;\\n    }\\n\\n    function addSingleSideLiquidity(uint256 amount, uint256 minAmountOut, address pairedToken, address pair) public {\\n        require(controllers[msg.sender], \\\"Not a Controller\\\");\\n        require(rooted.balanceOf(address(this)) >= amount, \\\"Not enough upToken Balance\\\");\\n\\n        gate.setUnrestricted(true);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(rooted);\\n        path[1] = pairedToken;\\n        uniswapRouter.swapExactTokensForTokens(amount, minAmountOut, path, pair, block.timestamp);\\n\\n        gate.setUnrestricted(false);\\n    }\\n}\",\"keccak256\":\"0x13509c263ec4c8a9489fb3de468e388864dc0af41fa48a59d2abbaa0e899931a\",\"license\":\"U-U-U-UPPPPP\"},\"contracts/TokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\npragma solidity ^0.7.6;\\n\\n/* ROOTKIT:\\nAllows recovery of unexpected tokens (airdrops, etc)\\nInheriters can customize logic by overriding canRecoverTokens\\n*/\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ITokensRecoverable.sol\\\";\\n\\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    function recoverTokens(IERC20 token) public override ownerOnly() \\n    {\\n        require (canRecoverTokens(token));\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \\n    { \\n        return address(token) != address(this); \\n    }\\n}\",\"keccak256\":\"0x2b4634e73f41f40fdd057dfd3422c3f70599d9f41bc34dc8cd988e58120a8f7c\",\"license\":\"U-U-U-UPPPPP\"}},\"version\":1}",
  "bytecode": "0x60c0604052600080546001600160a01b0319163317905534801561002257600080fd5b50604051610d90380380610d908339818101604052606081101561004557600080fd5b508051602080830151604093840151606084811b6001600160601b031990811660a052600280546001600160a01b0319166001600160a01b03808716919091179091559183901b16608052855163095ea7b360e01b81528183166004820152600019602482015295519495929491939086169263095ea7b392604480830193928290030181600087803b1580156100db57600080fd5b505af11580156100ef573d6000803e3d6000fd5b505050506040513d602081101561010557600080fd5b505050505060805160601c60a05160601c610c586101386000398061034652806104bb5250806105375250610c586000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ec578063cd8eebcc14610110578063e0dba60f14610136578063f2fde38b146101645761007d565b806316114acd146100825780634e71e0c8146100aa57806358a150fb146100b2575b600080fd5b6100a86004803603602081101561009857600080fd5b50356001600160a01b031661018a565b005b6100a8610279565b6100a8600480360360808110156100c857600080fd5b508035906020810135906001600160a01b03604082013581169160600135166102ec565b6100f4610738565b604080516001600160a01b039092168252519081900360200190f35b6100a86004803603602081101561012657600080fd5b50356001600160a01b0316610747565b6100a86004803603604081101561014c57600080fd5b506001600160a01b03813516906020013515156107b5565b6100a86004803603602081101561017a57600080fd5b50356001600160a01b031661082c565b6000546001600160a01b031633146101d6576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b6101df8161089a565b6101e857600080fd5b61027633826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d602081101561026357600080fd5b50516001600160a01b03841691906108ac565b50565b6001546001600160a01b0316331461029057600080fd5b600180546001600160a01b03191690556000805460405133926001600160a01b03909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03191633179055565b3360009081526003602052604090205460ff16610343576040805162461bcd60e51b815260206004820152601060248201526f2737ba10309021b7b73a3937b63632b960811b604482015290519081900360640190fd5b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103b157600080fd5b505afa1580156103c5573d6000803e3d6000fd5b505050506040513d60208110156103db57600080fd5b50511015610430576040805162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f756768207570546f6b656e2042616c616e6365000000000000604482015290519081900360640190fd5b60025460408051638327eb8760e01b81526001600482015290516001600160a01b0390921691638327eb879160248082019260009290919082900301818387803b15801561047d57600080fd5b505af1158015610491573d6000803e3d6000fd5b505060408051600280825260608201835260009450909250906020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106104e757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061051557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed173986868486426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156105d95781810151838201526020016105c1565b505050509050019650505050505050600060405180830381600087803b15801561060257600080fd5b505af1158015610616573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561063f57600080fd5b810190808051604051939291908464010000000082111561065f57600080fd5b90830190602082018581111561067457600080fd5b825186602082028301116401000000008211171561069157600080fd5b82525081516020918201928201910280838360005b838110156106be5781810151838201526020016106a6565b50505050919091016040818152600254638327eb8760e01b835260006004840181905291516001600160a01b039091169750638327eb8796506024808401965091945092509082900301818387803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031681565b6000546001600160a01b03163314610793576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610801576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610878576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116301415919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108fe908490610903565b505050565b6000610958826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109b49092919063ffffffff16565b8051909150156108fe5780806020019051602081101561097757600080fd5b50516108fe5760405162461bcd60e51b815260040180806020018281038252602a815260200180610bf9602a913960400191505060405180910390fd5b60606109c384846000856109cd565b90505b9392505050565b606082471015610a0e5760405162461bcd60e51b8152600401808060200182810382526026815260200180610bd36026913960400191505060405180910390fd5b610a1785610b28565b610a68576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310610aa65780518252601f199092019160209182019101610a87565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b08576040519150601f19603f3d011682016040523d82523d6000602084013e610b0d565b606091505b5091509150610b1d828286610b2e565b979650505050505050565b3b151590565b60608315610b3d5750816109c6565b825115610b4d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b97578181015183820152602001610b7f565b50505050905090810190601f168015610bc45780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220639b5eb02b9539372c5bd9f9afd6d1c87567adb2e3c976394ed9d3c4c1d61fe264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ec578063cd8eebcc14610110578063e0dba60f14610136578063f2fde38b146101645761007d565b806316114acd146100825780634e71e0c8146100aa57806358a150fb146100b2575b600080fd5b6100a86004803603602081101561009857600080fd5b50356001600160a01b031661018a565b005b6100a8610279565b6100a8600480360360808110156100c857600080fd5b508035906020810135906001600160a01b03604082013581169160600135166102ec565b6100f4610738565b604080516001600160a01b039092168252519081900360200190f35b6100a86004803603602081101561012657600080fd5b50356001600160a01b0316610747565b6100a86004803603604081101561014c57600080fd5b506001600160a01b03813516906020013515156107b5565b6100a86004803603602081101561017a57600080fd5b50356001600160a01b031661082c565b6000546001600160a01b031633146101d6576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b6101df8161089a565b6101e857600080fd5b61027633826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d602081101561026357600080fd5b50516001600160a01b03841691906108ac565b50565b6001546001600160a01b0316331461029057600080fd5b600180546001600160a01b03191690556000805460405133926001600160a01b03909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03191633179055565b3360009081526003602052604090205460ff16610343576040805162461bcd60e51b815260206004820152601060248201526f2737ba10309021b7b73a3937b63632b960811b604482015290519081900360640190fd5b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103b157600080fd5b505afa1580156103c5573d6000803e3d6000fd5b505050506040513d60208110156103db57600080fd5b50511015610430576040805162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f756768207570546f6b656e2042616c616e6365000000000000604482015290519081900360640190fd5b60025460408051638327eb8760e01b81526001600482015290516001600160a01b0390921691638327eb879160248082019260009290919082900301818387803b15801561047d57600080fd5b505af1158015610491573d6000803e3d6000fd5b505060408051600280825260608201835260009450909250906020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106104e757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061051557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed173986868486426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156105d95781810151838201526020016105c1565b505050509050019650505050505050600060405180830381600087803b15801561060257600080fd5b505af1158015610616573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561063f57600080fd5b810190808051604051939291908464010000000082111561065f57600080fd5b90830190602082018581111561067457600080fd5b825186602082028301116401000000008211171561069157600080fd5b82525081516020918201928201910280838360005b838110156106be5781810151838201526020016106a6565b50505050919091016040818152600254638327eb8760e01b835260006004840181905291516001600160a01b039091169750638327eb8796506024808401965091945092509082900301818387803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031681565b6000546001600160a01b03163314610793576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610801576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610878576040805162461bcd60e51b815260206004820152600a6024820152694f776e6572206f6e6c7960b01b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116301415919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108fe908490610903565b505050565b6000610958826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109b49092919063ffffffff16565b8051909150156108fe5780806020019051602081101561097757600080fd5b50516108fe5760405162461bcd60e51b815260040180806020018281038252602a815260200180610bf9602a913960400191505060405180910390fd5b60606109c384846000856109cd565b90505b9392505050565b606082471015610a0e5760405162461bcd60e51b8152600401808060200182810382526026815260200180610bd36026913960400191505060405180910390fd5b610a1785610b28565b610a68576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310610aa65780518252601f199092019160209182019101610a87565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b08576040519150601f19603f3d011682016040523d82523d6000602084013e610b0d565b606091505b5091509150610b1d828286610b2e565b979650505050505050565b3b151590565b60608315610b3d5750816109c6565b825115610b4d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b97578181015183820152602001610b7f565b50505050905090810190601f168015610bc45780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220639b5eb02b9539372c5bd9f9afd6d1c87567adb2e3c976394ed9d3c4c1d61fe264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7200,
        "contract": "contracts/SingleSideLiquidityAdder.sol:SingleSideLiquidityAdder",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7202,
        "contract": "contracts/SingleSideLiquidityAdder.sol:SingleSideLiquidityAdder",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8304,
        "contract": "contracts/SingleSideLiquidityAdder.sol:SingleSideLiquidityAdder",
        "label": "gate",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RootedTransferGate)7741"
      },
      {
        "astId": 8310,
        "contract": "contracts/SingleSideLiquidityAdder.sol:SingleSideLiquidityAdder",
        "label": "controllers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RootedTransferGate)7741": {
        "encoding": "inplace",
        "label": "contract RootedTransferGate",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}