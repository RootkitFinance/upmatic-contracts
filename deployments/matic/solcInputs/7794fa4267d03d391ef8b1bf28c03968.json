{
  "language": "Solidity",
  "sources": {
    "contracts/Address.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/Arb.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./Owned.sol\";\nimport \"./IERC31337.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IArb.sol\";\nimport \"./RootedTransferGate.sol\";\n\ncontract Arb is Owned, IArb {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 immutable uniswapRouter;\n    IERC20 immutable rooted;\n    IERC20 immutable base;\n    IERC20 immutable usd;\n    IERC31337 immutable elite;\n    RootedTransferGate immutable gate;\n    address immutable multisig;\n    mapping(address => bool) public arbManager;\n\n    constructor(IERC20 _base, IERC20 _usd, IERC31337 _elite, IERC20 _rooted, IUniswapV2Router02 _uniswapRouter, RootedTransferGate _gate, address _multisig) {\n        base = _base;\n        elite = _elite;\n        usd = _usd;\n        rooted = _rooted;\n        uniswapRouter = _uniswapRouter;\n        gate = _gate;\n        multisig = _multisig;\n        \n        _base.approve(address(_elite), uint256(-1));\n        _base.approve(address(_uniswapRouter), uint256(-1));\n        _rooted.approve(address(_uniswapRouter), uint256(-1));\n        _elite.approve(address(_uniswapRouter), uint256(-1));\n        _usd.approve(address(_uniswapRouter), uint256(-1));\n    }\n\n    modifier arbManagerOnly() {\n        require(arbManager[msg.sender], \"Not an arb Manager\");\n        _;\n    }\n\n    // Owner function to enable other contracts or addresses to use the Vault\n    function setArbManager(address managerAddress, bool allow) public ownerOnly() {\n        arbManager[managerAddress] = allow;\n    }\n\n    function withdrawTokensToMultisig(IERC20 token, uint256 amount) public override {\n        require (arbManager[msg.sender] || msg.sender == multisig || msg.sender == owner);\n        token.transfer(multisig, amount);\n    }\n\n    function unrestrictedSwap(uint amount, uint minAmountOut, address[] calldata path) public override arbManagerOnly() {\n        gate.setUnrestricted(true);\n        uniswapRouter.swapExactTokensForTokens(amount, minAmountOut, path, address(this), block.timestamp);\n        gate.setUnrestricted(false);\n    }\n\n    function balancePriceBase(uint256 amount, uint256 minAmountOut) public override arbManagerOnly() {\n        require (minAmountOut > amount);\n        gate.setUnrestricted(true);\n        address[] memory path = new address[](3);\n        path[0] = address(base);\n        path[1] = address(rooted);\n        path[2] = address(elite);\n        uniswapRouter.swapExactTokensForTokens(amount, minAmountOut, path, address(this), block.timestamp);\n        elite.withdrawTokens(elite.balanceOf(address(this)));\n        gate.setUnrestricted(false);\n    }\n\n    function balancePriceElite(uint256 amount, uint256 minAmountOut) public override arbManagerOnly() {\n        require (minAmountOut > amount);\n        gate.setUnrestricted(true);\n        elite.depositTokens(amount);\n        address[] memory path = new address[](3);\n        path[0] = address(elite);\n        path[1] = address(rooted);\n        path[2] = address(base);\n        uniswapRouter.swapExactTokensForTokens(amount, minAmountOut, path, address(this), block.timestamp);\n        gate.setUnrestricted(false);\n    }\n\n    function recoverTokens(IERC20 token) public ownerOnly() {\n        require(address(token) != address(base) && address(token) != address(usd) && address(token) != address(elite) && address(token) != address(rooted));\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n    }\n}"
    },
    "contracts/Arbitrage.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IERC20.sol\";\nimport \"./IERC31337.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\ncontract Arbitrage is TokensRecoverable\n{\n    IERC20 immutable usdToken;\n    IERC20 immutable baseToken;\n    IERC31337 immutable eliteToken;\n    IERC20 immutable rootedToken;\n    IUniswapV2Router02 immutable uniswapRouter;\n\n    mapping (address => bool) public arbitrageurs;\n    \n    uint public minRootedBalance;\n\n    constructor(IERC20 _baseToken, IERC20 _usdToken, IERC31337 _eliteToken, IERC20 _rootedToken, IUniswapV2Router02 _uniswapRouter) {\n        usdToken = _usdToken;\n        baseToken = _baseToken;\n        eliteToken = _eliteToken;\n        rootedToken = _rootedToken;\n        uniswapRouter = _uniswapRouter;\n\n        _usdToken.approve(address(_uniswapRouter), uint256(-1));\n        _baseToken.approve(address(_uniswapRouter), uint256(-1));\n        _eliteToken.approve(address(_uniswapRouter), uint256(-1));\n        _rootedToken.approve(address(_uniswapRouter), uint256(-1));\n        _baseToken.approve(address(_eliteToken), uint256(-1));\n    }\n\n    modifier arbitrageurOnly() {\n        require(arbitrageurs[msg.sender], \"Not an arbitrageur\");\n        _;\n    }\n\n    function setArbitrageur(address arbitrageur, bool allow) public ownerOnly() {\n        arbitrageurs[arbitrageur] = allow;\n    }\n\n    function setMinRootedBalance(uint256 _minRootedBalance) public ownerOnly() {\n        minRootedBalance = _minRootedBalance;\n    }\n\n    function witdrawProfits() public ownerOnly() {\n        uint balance = rootedToken.balanceOf(address(this));\n        require (balance > minRootedBalance);\n        rootedToken.transfer(msg.sender, balance - minRootedBalance);\n    }\n\n    function rootUsdBaseRoot(uint256 rootedAmount, uint256 minAmountOut) public arbitrageurOnly() {\n        uint baseAmount = sellRootedToken(address(baseToken), rootedAmount, 0);\n        uint usdAmount = usdBaseSwap(baseAmount);\n        uint rootedAmountOut =  buyRootedToken(address(baseToken), usdAmount, minAmountOut);\n        require(rootedAmountOut > rootedAmount, \"No profit\");\n    }\n\n    function rootBaseUsdRoot(uint256 rootedAmount, uint256 minAmountOut) public arbitrageurOnly() {\n        uint usdAmount = sellRootedToken(address(usdToken), rootedAmount, 0);\n        uint baseAmount = baseUsdSwap(usdAmount);\n        uint rootedAmountOut = buyRootedToken(address(baseToken), baseAmount, minAmountOut);\n        require(rootedAmountOut > rootedAmount, \"No profit\");\n    }\n\n    function rootBaseEliteRoot(uint256 rootedAmount, uint256 minAmountOut) public arbitrageurOnly() {\n        uint256 baseAmount = sellRootedToken(address(baseToken), rootedAmount, 0);\n        eliteToken.depositTokens(baseAmount);\n        uint256 rootedAmountOut = buyRootedToken(address(eliteToken), baseAmount, minAmountOut);\n        require(rootedAmountOut > rootedAmount, \"No profit\");\n    }\n\n    function rootEliteBaseRoot(uint256 rootedAmount, uint256 minAmountOut) public arbitrageurOnly() {\n        uint256 eliteAmount = sellRootedToken(address(eliteToken), rootedAmount, 0);\n        eliteToken.withdrawTokens(eliteAmount);\n        uint256 rootedAmountOut = buyRootedToken(address(baseToken), eliteAmount, minAmountOut);\n        require(rootedAmountOut > rootedAmount, \"No profit\");\n    }\n\n    //internal\n    function buyRootedToken(address token, uint256 amountToSpend, uint256 minAmountOut) private returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(token);\n        path[1] = address(rootedToken);\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountToSpend, minAmountOut, path, address(this), block.timestamp);\n        return amounts[1];\n    }\n\n    function sellRootedToken(address token, uint256 amountToSpend, uint256 minAmountOut) private returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(rootedToken);\n        path[1] = address(token); \n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountToSpend, minAmountOut, path, address(this), block.timestamp);    \n        return amounts[1];\n    }\n\n    function usdBaseSwap(uint256 amountToSpend) private returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(usdToken);\n        path[1] = address(baseToken); \n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountToSpend, 0, path, address(this), block.timestamp);\n        return amounts[1];\n    }\n\n    function baseUsdSwap(uint256 amountToSpend) private returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(baseToken);\n        path[1] = address(usdToken); \n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountToSpend, 0, path, address(this), block.timestamp);\n        return amounts[1];\n    }\n}\n"
    },
    "contracts/BlackListRegistry.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./Owned.sol\";\n\ncontract BlackListRegistry is Owned\n{\n    mapping (address => bool) public blackList;\n    \n    function setBlackListed(address account, bool blackListed) public ownerOnly()\n    {\n        blackList[account] = blackListed;\n    }\n}"
    },
    "contracts/EliteFloorCalculator.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nA floor calculator to use with ERC31337 AMM pairs\nEnsures 100% of accessible funds are backed at all times\n*/\n\nimport \"./IFloorCalculator.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./EnumerableSet.sol\";\n\ncontract EliteFloorCalculator is IFloorCalculator, TokensRecoverable\n{\n    using SafeMath for uint256;\n\n    IERC20 immutable rootedToken;\n    address immutable rootedElitePair;\n    address immutable rootedBasePair;\n    IUniswapV2Router02 immutable internal uniswapRouter;\n    IUniswapV2Factory immutable internal uniswapFactory;\n\n    constructor(IERC20 _rootedToken, IERC20 _eliteToken, IERC20 _baseToken, IUniswapV2Factory _uniswapFactory, IUniswapV2Router02 _uniswapRouter)\n    {\n        rootedToken = _rootedToken;\n        uniswapFactory = _uniswapFactory;\n        uniswapRouter = _uniswapRouter;\n\n        rootedElitePair = _uniswapFactory.getPair(address(_eliteToken), address(_rootedToken));\n        rootedBasePair = _uniswapFactory.getPair(address(_baseToken), address(_rootedToken));\n    }\n\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) public override view returns (uint256)\n    {\n        uint256 totalRootedInPairs = rootedToken.balanceOf(rootedElitePair).add(rootedToken.balanceOf(rootedBasePair));\n        uint256 totalBaseAndEliteInPairs = eliteToken.balanceOf(rootedElitePair).add(baseToken.balanceOf(rootedBasePair));\n        uint256 rootedCirculatingSupply = rootedToken.totalSupply().sub(totalRootedInPairs);\n        uint256 amountUntilFloor = rootedCirculatingSupply > 0 ? uniswapRouter.getAmountOut(rootedCirculatingSupply, totalRootedInPairs, totalBaseAndEliteInPairs) : 0;\n\n        uint256 totalExcessInPools = totalBaseAndEliteInPairs.sub(amountUntilFloor);\n        uint256 previouslySwept = eliteToken.totalSupply().sub(baseToken.balanceOf(address(eliteToken)));\n        \n        if (previouslySwept >= totalExcessInPools) { return 0; }\n        return totalExcessInPools.sub(previouslySwept);\n    }\n}"
    },
    "contracts/EliteToken.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./ERC31337.sol\";\nimport \"./IERC20.sol\";\n\ncontract EliteToken is ERC31337\n{\n    using Address for address;\n    using SafeMath for uint256;\n    \n    mapping (address => bool) public freeParticipantControllers;\n    mapping (address => bool) public freeParticipants; \n\n    mapping (address => bool) public burnRateControllers;\n    uint16 burnRate;   \n\n    constructor (IERC20 _wrappedToken) ERC31337(_wrappedToken, \"eliteMATIC\", \"eMATIC\")\n    {\n    }    \n\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\n    {\n        freeParticipantControllers[freeParticipantController] = allow;\n    }\n\n    function setFreeParticipant(address participant, bool free) public\n    {\n        require (msg.sender == owner || freeParticipantControllers[msg.sender], \"Not an owner or free participant controller\");\n        freeParticipants[participant] = free;\n    }\n\n    function setBurnRateController(address burnRateController, bool allow) public ownerOnly()\n    {\n        burnRateControllers[burnRateController] = allow;\n    }\n\n    function setBurnRate(uint16 _burnRate) public // 10000 = 100%\n    {\n        require (msg.sender == owner || burnRateControllers[msg.sender], \"Not an owner or burn rate controller\");\n        require (_burnRate <= 10000, \"But rate must be less or equal to 100%\");\n       \n        burnRate = _burnRate;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \n    {\n        require(sender != address(0), \"EliteToken: transfer from the zero address\");\n        require(recipient != address(0), \"EliteToken: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n        uint256 remaining = amount;\n\n        if (!freeParticipants[sender] && !freeParticipants[recipient] && burnRate > 0)\n        {\n            uint256 burn = amount * burnRate / 10000;\n            amount = remaining = remaining.sub(burn, \"Burn too much\");\n            _burn(sender, burn);\n        }\n        \n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \"EliteToken: transfer amount exceeds balance\");\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\n        \n        emit Transfer(sender, recipient, remaining);\n    }\n}"
    },
    "contracts/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}"
    },
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nSimplified thanks to higher solidity version\nBut same functionality\n*/\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\nabstract contract ERC20 is IERC20 \n{\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balanceOf;\n    mapping (address => mapping (address => uint256)) public override allowance;\n\n    uint256 public override totalSupply;\n\n    string public override name;\n    string public override symbol;\n    uint8 public override decimals = 18;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory _name, string memory _symbol) \n    {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function balanceOf(address a) public virtual override view returns (uint256) { return _balanceOf[a]; }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 oldAllowance = allowance[sender][msg.sender];\n        if (oldAllowance != uint256(-1)) {\n            _approve(sender, msg.sender, oldAllowance.sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        }\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        totalSupply = totalSupply.add(amount);\n        _balanceOf[account] = _balanceOf[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balanceOf[account] = _balanceOf[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        totalSupply = totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        allowance[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 _decimals) internal {\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}"
    },
    "contracts/ERC31337.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nA wrapped token, where the underlying token can be swept\nand used for other purposes\nGoverned by an installable floor calculator contract\nSweepable by designated sweeper addresses\n*/\n\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./IFloorCalculator.sol\";\nimport \"./WrappedERC20.sol\";\nimport \"./IERC31337.sol\";\n\ncontract ERC31337 is WrappedERC20, IERC31337\n{\n    using SafeERC20 for IERC20;\n\n    IFloorCalculator public override floorCalculator;\n    \n    mapping (address => bool) public override sweepers;\n\n    constructor(IERC20 _wrappedToken, string memory _name, string memory _symbol)\n        WrappedERC20(_wrappedToken, _name, _symbol)\n    {\n    }\n\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public override ownerOnly()\n    {\n        floorCalculator = _floorCalculator;\n    }\n\n    function setSweeper(address sweeper, bool allow) public override ownerOnly()\n    {\n        sweepers[sweeper] = allow;\n    }\n\n    function sweepFloor(address to) public override returns (uint256 amountSwept)\n    {\n        require (to != address(0));\n        require (sweepers[msg.sender], \"Sweepers only\");\n        amountSwept = floorCalculator.calculateSubFloor(wrappedToken, this);\n        if (amountSwept > 0) {\n            wrappedToken.safeTransfer(to, amountSwept);\n        }\n    }\n}"
    },
    "contracts/FeeSplitter.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IERC20.sol\";\nimport \"./IGatedERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./Address.sol\";\nimport \"./TokensRecoverable.sol\";\nimport './IUniswapV2Router02.sol';\n\ncontract FeeSplitter is TokensRecoverable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n    \n    address public devAddress;    \n    address public rootFeederAddress;\n    address public immutable deployerAddress;\n    IUniswapV2Router02 public immutable router;\n    IERC20 public immutable chainToken;\n   \n    mapping (IGatedERC20 => uint256) public burnRates;\n    mapping (IGatedERC20 => uint256) public sellRates;\n    mapping (IGatedERC20 => uint256) public keepRates;\n\n    mapping (IGatedERC20 => address[]) public chainTokenFeeCollectors;\n    mapping (IGatedERC20 => uint256[]) public chainTokenFeeRates;\n\n    mapping (IGatedERC20 => address[]) public rootedTokenFeeCollectors;\n    mapping (IGatedERC20 => uint256[]) public rootedTokenFeeRates;\n\n    constructor(address _devAddress, address _rootFeederAddress, IUniswapV2Router02 _router)\n    {\n        deployerAddress = msg.sender;\n        devAddress = _devAddress;\n        rootFeederAddress = _rootFeederAddress;\n        router = _router;\n        chainToken = IERC20(_router.WETH());   \n    }\n\n    function setDevAddress(address _devAddress) public\n    {\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \"Not a deployer or dev address\");\n        devAddress = _devAddress;\n    }\n\n    function setRootFeederAddress(address _rootFeederAddress) public ownerOnly()\n    {\n        rootFeederAddress = _rootFeederAddress;\n    }\n\n    function setFees(IGatedERC20 token, uint256 burnRate, uint256 sellRate, uint256 keepRate) public ownerOnly() // 100% = 10000\n    {\n        require (burnRate + sellRate + keepRate == 10000, \"Total fee rate must be 100%\");\n        \n        burnRates[token] = burnRate;\n        sellRates[token] = sellRate;\n        keepRates[token] = keepRate;\n        \n        token.approve(address(router), uint256(-1));\n    }\n\n    function setChainTokenFeeCollectors(IGatedERC20 token, address[] memory collectors, uint256[] memory rates) public ownerOnly() // 100% = 10000\n    {\n        require (collectors.length == rates.length, \"Fee Collectors and Rates must be the same size\");\n        require (collectors[0] == devAddress && collectors[1] == rootFeederAddress, \"First address must be dev address, second address must be rootFeeder address\");\n        \n        uint256 totalRate = 0;\n        for (uint256 i = 0; i < rates.length; i++)\n        {\n            totalRate = totalRate + rates[i];\n        }\n        \n        require (totalRate == 10000, \"Total fee rate must be 100%\");\n\n        chainTokenFeeCollectors[token] = collectors;\n        chainTokenFeeRates[token] = rates;\n    }\n\n    function setRootedTokenFeeCollectors(IGatedERC20 token, address[] memory collectors, uint256[] memory rates) public ownerOnly() // 100% = 10000\n    {\n        require (collectors.length == rates.length, \"Fee Collectors and Rates must be the same size\");\n        \n        uint256 totalRate = 0;\n        for (uint256 i = 0; i < rates.length; i++)\n        {\n            totalRate = totalRate + rates[i];\n        }\n\n        require (totalRate == 10000, \"Total fee rate must be 100%\");\n\n        rootedTokenFeeCollectors[token] = collectors;\n        rootedTokenFeeRates[token] = rates;\n    }\n\n    function payFees(IGatedERC20 token) public\n    {\n        uint256 balance = token.balanceOf(address(this));\n        require (balance > 0, \"Nothing to pay\");\n\n        if (burnRates[token] > 0)\n        {\n            uint256 burnAmount = burnRates[token] * balance / 10000;\n            token.burn(burnAmount);\n        }\n\n        if (sellRates[token] > 0)\n        {\n            uint256 sellAmount = sellRates[token] * balance / 10000;\n            \n            address[] memory path = new address[](2);\n            path[0] = address(token);\n            path[1] = address(chainToken);\n            uint256[] memory amounts = router.swapExactTokensForTokens(sellAmount, 0, path, address(this), block.timestamp);\n\n            address[] memory collectors = chainTokenFeeCollectors[token];\n            uint256[] memory rates = chainTokenFeeRates[token];\n            distribute(chainToken, amounts[1], collectors, rates);\n        }\n\n        if (keepRates[token] > 0)\n        {\n            uint256 keepAmount = keepRates[token] * balance / 10000;\n            address[] memory collectors = rootedTokenFeeCollectors[token];\n            uint256[] memory rates = rootedTokenFeeRates[token];\n            distribute(token, keepAmount, collectors, rates);\n        }\n    }\n    \n    function distribute(IERC20 token, uint256 amount, address[] memory collectors, uint256[] memory rates) private\n    {\n        for (uint256 i = 0; i < collectors.length; i++)\n        {\n            address collector = collectors[i];\n            uint256 rate = rates[i];\n\n            if (rate > 0)\n            {\n                uint256 feeAmount = rate * amount / 10000;\n                token.transfer(collector, feeAmount);\n            }\n        }\n    }\n}"
    },
    "contracts/FreeParticipantRegistry.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./Owned.sol\";\n\ncontract FreeParticipantRegistry is Owned\n{\n    address transferGate;\n    mapping (address => bool) public freeParticipantControllers;\n    mapping (address => bool) public freeParticipant;\n\n    modifier transferGateOnly()\n    {\n        require (msg.sender == transferGate, \"Transfer Gate only\");\n        _;\n    }\n\n    function setTransferGate(address _transferGate) public ownerOnly()\n    {\n        transferGate = _transferGate;\n    }\n\n    function setFreeParticipantController(address freeParticipantController, bool allow) public transferGateOnly()\n    {\n        freeParticipantControllers[freeParticipantController] = allow;\n    }\n\n    function setFreeParticipant(address participant, bool free) public transferGateOnly()\n    {\n        freeParticipant[participant] = free;\n    }\n}"
    },
    "contracts/GatedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\n/* ROOTKIT:\nA standard ERC20 with an extra hook: An installable transfer\ngate allowing for token tax and burn on transfer\n*/\n\nimport \"./ERC20.sol\";\nimport \"./ITransferGate.sol\";\nimport \"./SafeMath.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./IGatedERC20.sol\";\n\nabstract contract GatedERC20 is ERC20, TokensRecoverable, IGatedERC20\n{\n    using SafeMath for uint256;\n\n    ITransferGate public override transferGate;\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol)\n    {\n    }\n\n    function setTransferGate(ITransferGate _transferGate) public override ownerOnly()\n    {\n        transferGate = _transferGate;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \n    {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        ITransferGate _transferGate = transferGate;\n        uint256 remaining = amount;\n        if (address(_transferGate) != address(0)) \n        {\n            address splitter = _transferGate.feeSplitter();\n            uint256 fees = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);\n            if (fees > 0)\n            {\n               _balanceOf[splitter] = _balanceOf[splitter].add(fees);\n                emit Transfer(sender, splitter, fees);\n                remaining = remaining.sub(fees);\n            }           \n        }\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\n        emit Transfer(sender, recipient, remaining);\n    }\n\n    function burn(uint256 amount) public override\n    {\n        _burn(msg.sender, amount);\n    }\n}"
    },
    "contracts/IArb.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.4;\n\nimport \"./IERC20.sol\";\n\ninterface IArb {\n    function unrestrictedSwap(uint amount, uint minAmountOut, address[] calldata path) external;\n    function balancePriceBase(uint256 amount, uint256 minAmountOut) external;\n    function balancePriceElite(uint256 amount, uint256 minAmountOut) external;\n    function withdrawTokensToMultisig(IERC20 token, uint256 amount) external;\n}"
    },
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IERC20 \n{\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _account) external view returns (uint256);\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function approve(address _spender, uint256 _amount) external returns (bool);\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/IERC31337.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IWrappedERC20.sol\";\nimport \"./IFloorCalculator.sol\";\n\ninterface IERC31337 is IWrappedERC20\n{\n    function floorCalculator() external view returns (IFloorCalculator);\n    function sweepers(address _sweeper) external view returns (bool);\n    \n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\n    function setSweeper(address _sweeper, bool _allow) external;\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\n}"
    },
    "contracts/IFloorCalculator.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IERC20.sol\";\n\ninterface IFloorCalculator\n{\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) external view returns (uint256);\n}"
    },
    "contracts/IGatedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IERC20.sol\";\nimport \"./ITransferGate.sol\";\n\ninterface IGatedERC20 is IERC20\n{\n    function transferGate() external view returns (ITransferGate);\n\n    function setTransferGate(ITransferGate _transferGate) external;\n    function burn(uint256 amount) external;\n}"
    },
    "contracts/ILiquidityLockedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IUniswapV2Pair.sol\";\n\ninterface ILiquidityLockedERC20\n{\n    function setLiquidityLock(IUniswapV2Pair _liquidityPair, bool _locked) external;\n}"
    },
    "contracts/IMarketDistribution.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IMarketDistribution\n{\n    function distributionComplete() external view returns (bool);\n    function vestingPeriodStartTime() external view returns (uint256); \n    function vestingPeriodEndTime() external view returns (uint256);\n    \n    function distribute() external;        \n    function claim(address account) external;\n    function claimReferralRewards(address account, uint256 referralShare) external;\n}"
    },
    "contracts/IMarketGeneration.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IMarketGeneration\n{\n    function contribution(address) external view returns (uint256);\n    function referralPoints(address) external view returns (uint256);    \n    function totalContribution() external view returns (uint256);\n    function totalReferralPoints() external view returns (uint256);\n}"
    },
    "contracts/IOwned.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IOwned\n{\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function owner() external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n    function claimOwnership() external;\n}"
    },
    "contracts/ITokensRecoverable.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IERC20.sol\";\n\ninterface ITokensRecoverable\n{\n    function recoverTokens(IERC20 token) external;\n}"
    },
    "contracts/ITransferGate.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface ITransferGate\n{\n    function feeSplitter() external view returns (address);\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external returns (uint256);\n}"
    },
    "contracts/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.4;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "contracts/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.4;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.4;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.4;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "contracts/IVault.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IVault\n{\n    function swap(uint amountIn, uint amountOutMin, address[] calldata path) external;\n    function swapSupportingFee(uint amountIn, uint amountOutMin, address[] calldata path) external;\n    function balancePriceBase(uint256 amount, uint256 minAmountOut) external;\n    function balancePriceElite(uint256 amount, uint256 minAmountOut) external;\n    function removeBuyAndTax(uint256 amount, uint256 minAmountOut, address token, uint16 tax, uint256 time) external;\n    function buyAndTax(address token, uint256 amountToSpend, uint256 minAmountOut, uint16 tax, uint256 time) external;\n    function sweepFloor() external;\n    function wrapToElite(uint256 baseAmount) external;\n    function unwrapElite(uint256 eliteAmount) external;\n    function addLiquidity(address pairedToken, uint256 pairedAmount, uint256 rootedAmount, uint256 pairedAmountMin, uint256 rootedAmountMin) external;\n    function removeLiquidity(address pairedToken, uint256 lpTokens, uint256 pairedAmountMin, uint256 rootedAmountMin) external;\n    function buyRooted(address token, uint256 amountToSpend, uint256 minAmountOut) external;\n    function sellRooted(address token, uint256 amountToSpend, uint256 minAmountOut) external;\n}"
    },
    "contracts/IWETH.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IWETH\n{    \n    function deposit() external payable;\n}"
    },
    "contracts/IWrappedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IERC20.sol\";\nimport \"./IWrappedERC20Events.sol\";\n\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\n{\n    function wrappedToken() external view returns (IERC20);\n    function depositTokens(uint256 _amount) external;\n    function withdrawTokens(uint256 _amount) external;\n}"
    },
    "contracts/IWrappedERC20Events.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\ninterface IWrappedERC20Events\n{\n    event Deposit(address indexed from, uint256 amount);\n    event Withdrawal(address indexed to, uint256 amount);\n}\n"
    },
    "contracts/LiquidityLockedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./ERC20.sol\";\nimport \"./Owned.sol\";\nimport \"./IUniswapV2Pair.sol\";\nimport \"./GatedERC20.sol\";\nimport \"./ILiquidityLockedERC20.sol\";\n\nabstract contract LiquidityLockedERC20 is GatedERC20, ILiquidityLockedERC20\n{\n    mapping (IUniswapV2Pair => bool) public liquidityPairLocked;\n    mapping (address => bool) public liquidityController;\n\n    struct CallRecord\n    {\n        address origin;\n        uint32 blockNumber;\n        bool transferFrom;\n    }\n\n    CallRecord balanceAllowed;\n\n    constructor(string memory _name, string memory _symbol)\n        GatedERC20(_name, _symbol)\n    {\n    }\n\n    function setLiquidityLock(IUniswapV2Pair _liquidityPair, bool _locked) public override\n    {\n        require (liquidityController[msg.sender], \"Liquidity controller only\");\n        require (_liquidityPair.token0() == address(this) || _liquidityPair.token1() == address(this), \"Unrelated pair\");\n        liquidityPairLocked[_liquidityPair] = _locked;\n    }\n\n    function setLiquidityController(address _liquidityController, bool _canControl) public ownerOnly()\n    {\n        liquidityController[_liquidityController] = _canControl;\n    }\n\n    function balanceOf(address account) public override view returns (uint256) \n    {\n        IUniswapV2Pair pair = IUniswapV2Pair(address(msg.sender));\n        if (liquidityPairLocked[pair]) {\n            CallRecord memory last = balanceAllowed;\n            require (last.origin == tx.origin && last.blockNumber == block.number, \"Liquidity is locked\");\n            if (last.transferFrom) {\n                (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\n                IERC20 token0 = IERC20(pair.token0());\n                if (address(token0) == address(this)) {\n                    require (IERC20(pair.token1()).balanceOf(address(pair)) < reserve1, \"Liquidity is locked\");\n                }\n                else {\n                    require (token0.balanceOf(address(pair)) < reserve0, \"Liquidity is locked\");\n                }\n            }\n        }\n        return super.balanceOf(account);\n    }\n\n    function allowBalance(bool _transferFrom) private\n    {\n        CallRecord memory last = balanceAllowed;\n        CallRecord memory allow = CallRecord({ \n            origin: tx.origin,\n            blockNumber: uint32(block.number),\n            transferFrom: _transferFrom\n        });\n        require (last.origin != allow.origin || last.blockNumber != allow.blockNumber || last.transferFrom != allow.transferFrom, \"Liquidity is locked (Please try again next block)\");\n        balanceAllowed = allow;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) \n    {        \n        if (liquidityPairLocked[IUniswapV2Pair(address(msg.sender))]) {\n            allowBalance(false);\n        }\n        else {\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\n        }\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) \n    {\n        if (liquidityPairLocked[IUniswapV2Pair(recipient)]) {\n            allowBalance(true);\n        }\n        else {\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\n        }\n        return super.transferFrom(sender, recipient, amount);\n    }\n}"
    },
    "contracts/MarketDistribution.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IMarketDistribution.sol\";\nimport \"./IMarketGeneration.sol\";\nimport \"./RootedToken.sol\";\nimport \"./RootedTransferGate.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC31337.sol\";\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Pair.sol\";\nimport \"./SafeERC20.sol\";\n\n/*\nIntroducing the Market Generation Event:\n\nAllows full and permanent liquidity locking\nof all raised funds with no commitment to LPs. \nUsing ERC-31337 we get ALL the raised funds\nback from liquidity if we lock all the raised\ntoken with all the supply of the new token and\nthere is no ability to mint.\n\n- Raise with any token\n- All raised funds get locked forever\n- ERC-31337 sweeps back all locked value\n- Recovered value buys from the new market\n- Any length vesting period\n- Built in referral system\n\nPhases:\n    Initializing\n        Call setupEliteRooted()\n        Call setupBaseRooted() \n        Call completeSetup()\n        \n    Call distribute() to:\n        Transfer all rootedToken to this contract\n        Take all BaseToken + rootedToken and create a market\n        Sweep the floor\n        Buy rootedToken for the groups\n        Move liquidity from elite pool to create standard pool\n        Begin the vesting period with a linier unlock\n\n    Complete\n        Everyone can call claim() to receive their tokens (via the liquidity generation contract)\n*/\n\ncontract MarketDistribution is TokensRecoverable, IMarketDistribution\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    bool public override distributionComplete;\n\n    IMarketGeneration public marketGeneration;\n    IUniswapV2Router02 uniswapRouter;\n    IUniswapV2Factory uniswapFactory;\n    RootedToken public rootedToken;\n    IERC31337 public eliteToken;\n    IERC20 public baseToken;\n    address public immutable devAddress;\n    address public liquidityController;\n    IUniswapV2Pair public rootedEliteLP;\n    IUniswapV2Pair public rootedBaseLP;\n\n    uint256 public constant rootedTokenSupply = 1e25; // 10 million\n\n    uint256 public totalBaseTokenCollected;\n    uint256 public totalBoughtForContributors;\n    mapping (address => uint256) public claimTime;\n    mapping (address => uint256) public totalClaim;\n    mapping (address => uint256) public remainingClaim;\n    uint256 public totalBoughtForReferrals;\n    \n    uint256 public recoveryDate = block.timestamp + 2592000; // 1 Month\n    \n    uint16 public devCutPercent;\n    uint16 public preBuyForReferralsPercent;\n    uint16 public preBuyForContributorsPercent;\n    uint16 public preBuyForMarketStabilizationPercent;\n    uint256 public override vestingPeriodStartTime;\n    uint256 public override vestingPeriodEndTime; \n    uint256 public vestingDuration;\n    uint256 public rootedBottom;\n\n    constructor(address _devAddress)\n    {\n        devAddress = _devAddress;\n    }\n\n    function init(\n        RootedToken _rootedToken, \n        IERC31337 _eliteToken, \n        address _liquidityController,\n        IUniswapV2Router02 _uniswapRouter, \n        IMarketGeneration _marketGeneration,\n        uint256 _vestingDuration, \n        uint16 _devCutPercent, \n        uint16 _preBuyForReferralsPercent, \n        uint16 _preBuyForContributorsPercent, \n        uint16 _preBuyForMarketStabilizationPercent) public ownerOnly()\n    {        \n        rootedToken = _rootedToken;\n        eliteToken = _eliteToken;\n        baseToken = _eliteToken.wrappedToken();\n        liquidityController = _liquidityController;\n        uniswapRouter = _uniswapRouter;\n        uniswapFactory = IUniswapV2Factory(_uniswapRouter.factory());\n        marketGeneration = _marketGeneration;\n        vestingDuration = _vestingDuration;\n        devCutPercent = _devCutPercent;\n        preBuyForReferralsPercent = _preBuyForReferralsPercent;\n        preBuyForContributorsPercent = _preBuyForContributorsPercent;\n        preBuyForMarketStabilizationPercent = _preBuyForMarketStabilizationPercent;\n    }\n\n    function setupEliteRooted() public\n    {\n        rootedEliteLP = IUniswapV2Pair(uniswapFactory.getPair(address(eliteToken), address(rootedToken)));\n        if (address(rootedEliteLP) == address(0)) \n        {\n            rootedEliteLP = IUniswapV2Pair(uniswapFactory.createPair(address(eliteToken), address(rootedToken)));\n            require (address(rootedEliteLP) != address(0));\n        }\n    }\n\n    function setupBaseRooted() public\n    {\n        rootedBaseLP = IUniswapV2Pair(uniswapFactory.getPair(address(baseToken), address(rootedToken)));\n        if (address(rootedBaseLP) == address(0)) \n        {\n            rootedBaseLP = IUniswapV2Pair(uniswapFactory.createPair(address(baseToken), address(rootedToken)));\n            require (address(rootedBaseLP) != address(0));\n        }\n    }\n\n    function completeSetup() public ownerOnly()\n    {   \n        require (address(rootedEliteLP) != address(0), \"Rooted Elite pool is not created\");\n        require (address(rootedBaseLP) != address(0), \"Rooted Base pool is not created\");   \n\n        eliteToken.approve(address(uniswapRouter), uint256(-1));\n        rootedToken.approve(address(uniswapRouter), uint256(-1));\n        baseToken.safeApprove(address(uniswapRouter), uint256(-1));\n        baseToken.safeApprove(address(eliteToken), uint256(-1));\n        rootedBaseLP.approve(address(uniswapRouter), uint256(-1));\n        rootedEliteLP.approve(address(uniswapRouter), uint256(-1));\n    }\n\n    function distribute() public override\n    {\n        require (msg.sender == address(marketGeneration), \"Unauthorized\");\n        require (!distributionComplete, \"Distribution complete\");\n   \n        vestingPeriodStartTime = block.timestamp;\n        vestingPeriodEndTime = block.timestamp + vestingDuration;\n        distributionComplete = true;\n        totalBaseTokenCollected = baseToken.balanceOf(address(marketGeneration));\n        baseToken.safeTransferFrom(msg.sender, address(this), totalBaseTokenCollected);  \n\n        RootedTransferGate gate = RootedTransferGate(address(rootedToken.transferGate()));\n\n        gate.setUnrestricted(true);\n        rootedToken.mint(rootedTokenSupply);\n\n        createRootedEliteLiquidity();\n\n        eliteToken.sweepFloor(address(this));        \n        eliteToken.depositTokens(baseToken.balanceOf(address(this)));\n                \n        buyTheBottom();        \n        preBuyForReferrals();\n        preBuyForContributors();\n        sellTheTop();        \n\n        uint256 devCut = totalBaseTokenCollected * devCutPercent / 10000;\n        baseToken.transfer(devAddress, devCut);\n        baseToken.transfer(liquidityController, baseToken.balanceOf(address(this)));      \n\n        createRootedBaseLiquidity();       \n\n        gate.setUnrestricted(false);\n    }   \n    \n    function createRootedEliteLiquidity() private\n    {\n        // Create Rooted/Elite LP \n        eliteToken.depositTokens(baseToken.balanceOf(address(this)));\n        uniswapRouter.addLiquidity(address(eliteToken), address(rootedToken), eliteToken.balanceOf(address(this)), rootedToken.totalSupply(), 0, 0, address(this), block.timestamp);\n    }\n\n    function buyTheBottom() private\n    {\n        uint256 amount = totalBaseTokenCollected * preBuyForMarketStabilizationPercent / 10000;  \n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);        \n        rootedBottom = amounts[1];\n    }\n\n    function sellTheTop() private\n    {\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(rootedBottom, 0, rootedElitePath(), address(this), block.timestamp);\n        uint256 eliteAmount = amounts[1];\n        eliteToken.withdrawTokens(eliteAmount);\n    }   \n    \n    function preBuyForReferrals() private \n    {\n        uint256 amount = totalBaseTokenCollected * preBuyForReferralsPercent / 10000;\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);\n        totalBoughtForReferrals = amounts[1];\n    }\n\n    function preBuyForContributors() private \n    {\n        uint256 preBuyAmount = totalBaseTokenCollected * preBuyForContributorsPercent / 10000;\n        uint256 eliteBalance = eliteToken.balanceOf(address(this));\n        uint256 amount = preBuyAmount > eliteBalance ? eliteBalance : preBuyAmount;\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);\n        totalBoughtForContributors = amounts[1];\n    }\n\n    function createRootedBaseLiquidity() private\n    {\n        uint256 elitePerLpToken = eliteToken.balanceOf(address(rootedEliteLP)).mul(1e18).div(rootedEliteLP.totalSupply());\n        uint256 lpAmountToRemove = baseToken.balanceOf(address(eliteToken)).mul(1e18).div(elitePerLpToken);\n        \n        (uint256 eliteAmount, uint256 rootedAmount) = uniswapRouter.removeLiquidity(address(eliteToken), address(rootedToken), lpAmountToRemove, 0, 0, address(this), block.timestamp);\n        \n        uint256 baseInElite = baseToken.balanceOf(address(eliteToken));\n        uint256 baseAmount = eliteAmount > baseInElite ? baseInElite : eliteAmount;       \n        \n        eliteToken.withdrawTokens(baseAmount);\n        uniswapRouter.addLiquidity(address(baseToken), address(rootedToken), baseAmount, rootedAmount, 0, 0, liquidityController, block.timestamp);\n        rootedEliteLP.transfer(liquidityController, rootedEliteLP.balanceOf(address(this)));\n        eliteToken.transfer(liquidityController, eliteToken.balanceOf(address(this)));\n    }\n\n    function eliteRootedPath() private view returns (address[] memory)\n    {\n        address[] memory path = new address[](2);\n        path[0] = address(eliteToken);\n        path[1] = address(rootedToken);\n        return path;\n    }\n\n    function rootedElitePath() private view returns (address[] memory)\n    {\n        address[] memory path = new address[](2);\n        path[0] = address(rootedToken);\n        path[1] = address(eliteToken);\n        return path;\n    }\n    \n    function getTotalClaim(address account) public view returns (uint256)\n    {\n        uint256 contribution = marketGeneration.contribution(account);\n        return contribution == 0 ? 0 : contribution.mul(totalBoughtForContributors).div(marketGeneration.totalContribution());\n    }\n\n    function getReferralClaim(address account) public view returns (uint256)\n    {\n        uint256 referralShare = marketGeneration.referralPoints(account);\n        return referralShare == 0 ? 0 : referralShare.mul(totalBoughtForReferrals).div(marketGeneration.totalReferralPoints());\n    }\n\n    function claim(address account) public override \n    {\n        require (distributionComplete, \"Distribution is not completed\");\n        require (msg.sender == address(marketGeneration), \"Unauthorized\");\n\n        if (totalClaim[account] == 0)\n        {\n            totalClaim[account] = remainingClaim[account] = getTotalClaim(account);\n        }\n\n        uint256 share = totalClaim[account];\n        uint256 endTime = vestingPeriodEndTime > block.timestamp ? block.timestamp : vestingPeriodEndTime;\n\n        require (claimTime[account] < endTime, \"Already claimed\");\n\n        uint256 claimStartTime = claimTime[account] == 0 ? vestingPeriodStartTime : claimTime[account];\n        share = (endTime.sub(claimStartTime)).mul(share).div(vestingDuration);\n        claimTime[account] = block.timestamp;\n        remainingClaim[account] -= share;\n        rootedToken.transfer(account, share);\n    }\n\n    function claimReferralRewards(address account, uint256 referralShare) public override \n    {\n        require (distributionComplete, \"Distribution is not completed\");\n        require (msg.sender == address(marketGeneration), \"Unauthorized\");\n\n        uint256 share = referralShare.mul(totalBoughtForReferrals).div(marketGeneration.totalReferralPoints());\n        rootedToken.transfer(account, share);\n    }\n\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \n    { \n        return block.timestamp > recoveryDate || token != rootedToken;\n    }\n}"
    },
    "contracts/MarketGeneration.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./IMarketDistribution.sol\";\nimport \"./IMarketGeneration.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./IWETH.sol\";\n\ncontract MarketGeneration is TokensRecoverable, IMarketGeneration\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public override contribution;\n    mapping (address => uint256) public override referralPoints;\n    uint256 public override totalReferralPoints;\n    uint256 public override totalContribution;\n    address public immutable devAddress;    \n\n    bool public isActive;\n\n    IERC20 public baseToken;\n    IMarketDistribution public marketDistribution;\n    uint256 public refundsAllowedUntil;\n\n    constructor(address _devAddress, IERC20 _baseToken)\n    {\n        devAddress = _devAddress;\n        baseToken = _baseToken;\n    }\n\n    modifier active()\n    {\n        require (isActive, \"Distribution not active\");\n        _;\n    }\n\n    function activate(IMarketDistribution _marketDistribution) public ownerOnly()\n    {\n        require (!isActive && block.timestamp >= refundsAllowedUntil, \"Already activated\");        \n        require (address(_marketDistribution) != address(0));\n        marketDistribution = _marketDistribution;\n        isActive = true;\n        baseToken.safeApprove(address(marketDistribution), uint256(-1));\n    }\n\n    function setMarketDistribution(IMarketDistribution _marketDistribution) public ownerOnly() active()\n    {\n        require (address(_marketDistribution) != address(0), \"Invalid market distribution\");\n        if (_marketDistribution == marketDistribution) { return; }\n        marketDistribution = _marketDistribution;\n        baseToken.safeApprove(address(marketDistribution), uint256(-1));\n        // Give everyone 1 day to claim refunds if they don't approve of the new distributor\n        refundsAllowedUntil = block.timestamp + 86400;\n    }\n\n    function complete() public ownerOnly() active()\n    {\n        require (block.timestamp >= refundsAllowedUntil, \"Refund period is still active\");\n        isActive = false;\n        if (address(this).balance == 0) { return; }\n        IWETH(address(baseToken)).deposit{ value: address(this).balance }();\n\n        marketDistribution.distribute();\n    }\n\n    function allowRefunds() public ownerOnly() active()\n    {\n        isActive = false;\n        refundsAllowedUntil = block.timestamp + 2592000; // 1 Month\n    }\n\n    function refund(uint256 amount) private\n    {\n        (bool success,) = msg.sender.call{ value: amount }(\"\");\n        require (success, \"Refund transfer failed\");  \n          \n        totalContribution -= amount;\n        contribution[msg.sender] = 0;\n\n        uint256 refPoints = referralPoints[msg.sender];\n\n        if (refPoints > 0)\n        {\n            totalReferralPoints -= refPoints;\n            referralPoints[msg.sender] = 0;\n        }\n    }\n\n    function claim() public \n    {\n        uint256 amount = contribution[msg.sender];\n\n        require (amount > 0, \"Nothing to claim\");\n        \n        if (refundsAllowedUntil > block.timestamp) \n        {\n            refund(amount);\n        }\n        else \n        {\n            marketDistribution.claim(msg.sender);\n        }\n    }\n\n    function claimReferralRewards() public\n    {\n        require (referralPoints[msg.sender] > 0, \"No rewards to claim\");\n        \n        uint256 refShare = referralPoints[msg.sender];\n        referralPoints[msg.sender] = 0;\n        marketDistribution.claimReferralRewards(msg.sender, refShare);\n    }\n\n    function contribute(address referral) public payable active() \n    {\n        if (referral == address(0) || referral == msg.sender) \n        {\n            referralPoints[devAddress] += msg.value;\n            totalReferralPoints += msg.value;\n        }\n        else \n        {\n            referralPoints[msg.sender] += msg.value;\n            referralPoints[referral] += msg.value;\n            totalReferralPoints +=(msg.value + msg.value);\n        }\n\n        contribution[msg.sender] += msg.value;\n        totalContribution += msg.value;\n    }\n\n    receive() external payable active()\n    {\n        contribute(address(0));\n    }\n}"
    },
    "contracts/MarketingVault.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./TokensRecoverable.sol\";\n\n// Contract to hold marketing funds. Owner can approve addresses\n// for limited amounts at a time\n\ncontract MarketingVault is TokensRecoverable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    mapping (address => uint256 ) public spendAmountToken;\n    mapping (address => uint256 ) public spendAmountUSD;\n\n    IERC20 immutable marketingFundMainToken;\n    IERC20 immutable marketingFundUSDToken;\n\n    constructor (IERC20 _marketingFundMainToken, IERC20 _marketingFundUSDToken){\n        marketingFundMainToken = _marketingFundMainToken;\n        marketingFundUSDToken = _marketingFundUSDToken;\n    }\n\n    function increaseSpendLimit(address spender, address token, uint256 amount) public ownerOnly {\n        if (token == address(marketingFundMainToken)){\n            spendAmountToken[spender] += amount;\n        }\n        if (token == address(marketingFundUSDToken)){\n            spendAmountUSD[spender] += amount;\n        }\n    }\n\n    function decreaseSpendLimit(address spender, address token, uint256 amount) public ownerOnly {\n        if (token == address(marketingFundMainToken)){\n            spendAmountToken[spender] = spendAmountToken[spender].sub(amount);\n        }\n        if (token == address(marketingFundUSDToken)){\n            spendAmountUSD[spender] = spendAmountUSD[spender].sub(amount);\n        }\n    }\n\n    function spendOnMarketing (address to, address token, uint256 amount) public {\n        if (token == address(marketingFundMainToken)){\n            require (spendAmountToken[address(msg.sender)] >=  amount);\n            spendAmountToken[address(msg.sender)] = spendAmountToken[address(msg.sender)].sub(amount);\n            marketingFundMainToken.transfer(to, amount);\n        }\n        if (token == address(marketingFundUSDToken)){\n            require (spendAmountUSD[address(msg.sender)] >=  amount);\n            spendAmountUSD[address(msg.sender)] = spendAmountUSD[address(msg.sender)].sub(amount);\n            marketingFundUSDToken.transfer(to, amount);\n        }\n    }\n\n}"
    },
    "contracts/Owned.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nProvides ownerOnly() modifier\nAllows for ownership transfer but requires the new\nowner to claim (accept) ownership\nSafer because no accidental transfers or renouncing\n*/\n\nimport \"./IOwned.sol\";\n\nabstract contract Owned is IOwned\n{\n    address public override owner = msg.sender;\n    address internal pendingOwner;\n\n    modifier ownerOnly()\n    {\n        require (msg.sender == owner, \"Owner only\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public override ownerOnly()\n    {\n        pendingOwner = newOwner;\n    }\n\n    function claimOwnership() public override\n    {\n        require (pendingOwner == msg.sender);\n        pendingOwner = address(0);\n        emit OwnershipTransferred(owner, msg.sender);\n        owner = msg.sender;\n    }\n}"
    },
    "contracts/RootedToken.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT: upToken\n\nAn upToken is a token that gains in value\nagainst whatever token it is paired with.\n\n- Raise any token using the Market Generation\nand Market Distribution contracts\n- An equal amount of upToken will be minted\n- combine with an ERC-31337 version of the \nraised token.\n- Send LP tokens to the Liquidity Controller\nfor efficent access to market features\n\n*/\n\nimport \"./LiquidityLockedERC20.sol\";\n\ncontract RootedToken is LiquidityLockedERC20(\"Rootkit\", \"upMATIC\")\n{\n    address public minter;\n\n    function setMinter(address _minter) public ownerOnly()\n    {\n        minter = _minter;\n    }\n\n    function mint(uint256 amount) public\n    {\n        require(msg.sender == minter, \"Not a minter\");\n        require(this.totalSupply() == 0, \"Already minted\");\n        _mint(msg.sender, amount);\n    }\n}"
    },
    "contracts/RootedTransferGate.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nA transfer gate (GatedERC20) for use with upTokens\n\nIt:\n    Allows customization of tax and burn rates\n    Allows transfer to/from approved pools\n    Disallows transfer to/from non-approved pools\n    Allows transfer to/from anywhere else\n    Allows for free transfers if permission granted\n    Allows for unrestricted transfers if permission granted\n    Allows for a pool to have an extra tax\n    Allows for a temporary declining tax\n*/\n\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Pair.sol\";\nimport \"./ILiquidityLockedERC20.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./ITransferGate.sol\";\nimport \"./FreeParticipantRegistry.sol\";\nimport \"./BlackListRegistry.sol\";\n\ncontract RootedTransferGate is TokensRecoverable, ITransferGate\n{   \n    using Address for address;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 immutable internal uniswapRouter;\n    ILiquidityLockedERC20 immutable internal rootedToken;\n\n    bool public unrestricted;\n    mapping (address => bool) public unrestrictedControllers;\n    mapping (address => bool) public feeControllers;\n    mapping (address => uint16) public poolsTaxRates;\n\n    address public override feeSplitter;\n    uint16 public feesRate;\n    IUniswapV2Pair public mainPool;\n    FreeParticipantRegistry public freeParticipantRegistry;\n    BlackListRegistry public blackListRegistry;\n   \n    uint16 public dumpTaxStartRate; \n    uint256 public dumpTaxDurationInSeconds;\n    uint256 public dumpTaxEndTimestamp;\n\n    constructor(ILiquidityLockedERC20 _rootedToken, IUniswapV2Router02 _uniswapRouter)\n    {\n        rootedToken = _rootedToken;\n        uniswapRouter = _uniswapRouter;\n    }\n\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\n    {\n        unrestrictedControllers[unrestrictedController] = allow;\n    }\n    \n    function setFeeControllers(address feeController, bool allow) public ownerOnly()\n    {\n        feeControllers[feeController] = allow;\n    }\n\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\n    {\n        freeParticipantRegistry.setFreeParticipantController(freeParticipantController, allow);\n    }\n\n    function setFreeParticipant(address participant, bool free) public\n    {\n        require (msg.sender == owner || freeParticipantRegistry.freeParticipantControllers(msg.sender), \"Not an owner or free participant controller\");\n        freeParticipantRegistry.setFreeParticipant(participant, free);\n    }\n\n    function setFeeSplitter(address _feeSplitter) public ownerOnly()\n    {\n        feeSplitter = _feeSplitter;\n    }\n\n    function setUnrestricted(bool _unrestricted) public\n    {\n        require (unrestrictedControllers[msg.sender], \"Not an unrestricted controller\");\n        unrestricted = _unrestricted;\n        rootedToken.setLiquidityLock(mainPool, !_unrestricted);\n    }\n\n    function setFreeParticipantRegistry(FreeParticipantRegistry _freeParticipantRegistry) public ownerOnly()\n    {\n        freeParticipantRegistry = _freeParticipantRegistry;\n    }\n\n    function setBlackListRegistry(BlackListRegistry _blackListRegistry) public ownerOnly()\n    {\n        blackListRegistry = _blackListRegistry;\n    }\n\n    function setMainPool(IUniswapV2Pair _mainPool) public ownerOnly()\n    {\n        mainPool = _mainPool;\n    }\n\n     function setPoolTaxRate(address pool, uint16 taxRate) public ownerOnly()\n    {\n        require (taxRate <= 10000, \"Fee rate must be less than or equal to 100%\");\n        poolsTaxRates[pool] = taxRate;        \n    }\n\n    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\n    {\n        require (feeControllers[msg.sender] || msg.sender == owner, \"Not an owner or fee controller\");\n        require (startTaxRate <= 10000, \"Dump tax rate must be less than or equal to 100%\");\n\n        dumpTaxStartRate = startTaxRate;\n        dumpTaxDurationInSeconds = durationInSeconds;\n        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\n    }\n\n    function getDumpTax() public view returns (uint256)\n    {\n        if (block.timestamp >= dumpTaxEndTimestamp) \n        {\n            return 0;\n        }       \n        \n        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\n    }\n\n    function setFees(uint16 _feesRate) public\n    {\n        require (feeControllers[msg.sender] || msg.sender == owner, \"Not an owner or fee controller\");\n        require (_feesRate <= 10000, \"Fee rate must be less than or equal to 100%\");\n        feesRate = _feesRate;\n    }\n\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256)\n    {\n        if (unrestricted || freeParticipantRegistry.freeParticipant(from) || freeParticipantRegistry.freeParticipant(to)) \n        {\n            return 0;\n        }\n\n        if (blackListRegistry.blackList(from) || blackListRegistry.blackList(to))\n        {\n            return amount;\n        }\n\n        uint16 poolTaxRate = poolsTaxRates[to];\n\n        if (poolTaxRate > feesRate) \n        {\n            uint256 totalTax = getDumpTax() + poolTaxRate;\n            return totalTax >= 10000 ? amount : amount * totalTax / 10000;\n        }\n\n        return amount * feesRate / 10000;\n    }   \n}"
    },
    "contracts/RootedTransferGateV2.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./Address.sol\";\nimport \"./IUniswapV2Pair.sol\";\nimport \"./LiquidityLockedERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./ITransferGate.sol\";\n\ncontract RootedTransferGateV2 is TokensRecoverable, ITransferGate\n{   \n    using Address for address;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    LiquidityLockedERC20 immutable internal rootedToken;\n    IUniswapV2Pair immutable internal basePair;\n    IUniswapV2Pair immutable internal elitePair;\n    IUniswapV2Pair immutable internal usdPair;\n\n    bool public unrestricted;\n\n    mapping (address => bool) public controllers;\n    mapping (address => bool) public freeParticipants;\n\n    address public override feeSplitter;\n    uint16 public feesRate;\n\n    constructor(LiquidityLockedERC20 _rootedToken, address _feeSplitter, IUniswapV2Pair _basePair, IUniswapV2Pair _elitePair, IUniswapV2Pair _usdPair)\n    {\n        rootedToken = _rootedToken;\n        feeSplitter = _feeSplitter;\n        basePair = _basePair;\n        elitePair = _elitePair;\n        usdPair = _usdPair;\n    }\n\n    function setFeeSplitter(address _feeSplitter) public ownerOnly() {\n        feeSplitter = _feeSplitter;\n    }\n    \n    function setControllers(address controller, bool allow) public ownerOnly() {\n        controllers[controller] = allow;\n    }\n\n    function setFreeParticipant(address participant, bool free) public {\n        require (msg.sender == owner || controllers[msg.sender], \"Not an owner or free participant controller\");\n        freeParticipants[participant] = free;\n    }\n\n    // sets global fee rate\n    function setFees(uint16 _feesRate) public {\n        require (controllers[msg.sender] || msg.sender == owner, \"Not an owner or controller\");\n        require (_feesRate <= 10000, \"Fee rate must be less than or equal to 100%\");\n        feesRate = _feesRate;\n    }\n\n    // removes fees from all transfers\n    function setUnrestricted(bool _unrestricted) public {\n        require (controllers[msg.sender] || msg.sender == owner, \"Not a controller\");\n        rootedToken.setLiquidityLock(basePair, !_unrestricted);\n        rootedToken.setLiquidityLock(elitePair, !_unrestricted);\n        rootedToken.setLiquidityLock(usdPair, !_unrestricted);\n        unrestricted = _unrestricted;\n    }\n\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256) {\n        if (unrestricted || freeParticipants[from] || freeParticipants[to]) {\n            return 0;\n        }\n        return amount * feesRate / 10000;\n    }\n}"
    },
    "contracts/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nModified to remove some junk\nAlso modified to remove silly restrictions (traps!) within safeApprove\n*/\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nlibrary SafeMath \n{\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n    {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) \n        {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n    {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n    {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    },
    "contracts/SingleSideLiquidityAdder.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./TokensRecoverable.sol\";\nimport \"./RootedTransferGate.sol\";\n\n// Contract to add 1 sided liquidty after buys via \n// selling and setting the \"to\" address as the pool\n\ncontract SingleSideLiquidityAdder is TokensRecoverable {    \n    \n    IUniswapV2Router02 immutable private uniswapRouter;\n    RootedTransferGate private gate;\n    IERC20 immutable private rooted;\n    mapping (address => bool) controllers;\n    \n    constructor (IERC20 _rooted, RootedTransferGate _gate, IUniswapV2Router02 _uniswapRouter) {\n        rooted = _rooted;\n        gate = _gate;\n        uniswapRouter = _uniswapRouter;\n        _rooted.approve(address(_uniswapRouter), uint(-1));\n    }\n\n    function setController(address _controller, bool _canControl) public ownerOnly() {\n        controllers[_controller] = _canControl;\n    }\n\n    function updateGate(RootedTransferGate _gate) public ownerOnly() {\n        gate = _gate;\n    }\n\n    function addSingleSideLiquidity(uint256 amount, uint256 minAmountOut, address pairedToken, address pair) public {\n        require(controllers[msg.sender], \"Not a Controller\");\n        require(rooted.balanceOf(address(this)) >= amount, \"Not enough upToken Balance\");\n\n        gate.setUnrestricted(true);\n\n        address[] memory path = new address[](2);\n        path[0] = address(rooted);\n        path[1] = pairedToken;\n        uniswapRouter.swapExactTokensForTokens(amount, minAmountOut, path, pair, block.timestamp);\n\n        gate.setUnrestricted(false);\n    }\n}"
    },
    "contracts/StakingToken.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./SafeMath.sol\";\nimport \"./ERC20.sol\";\nimport \"./TokensRecoverable.sol\";\n\ncontract StakingToken is ERC20(\"upMATIC Staking\", \"xUpMATIC\"), TokensRecoverable\n{\n    using SafeMath for uint256;\n    IERC20 public immutable rooted;\n\n    constructor(IERC20 _rooted) \n    {\n        rooted = _rooted;\n    }\n\n    // Stake rooted, get staking shares\n    function stake(uint256 amount) public \n    {\n        uint256 totalRooted = rooted.balanceOf(address(this));\n        uint256 totalShares = this.totalSupply();\n\n        if (totalShares == 0 || totalRooted == 0) \n        {\n            _mint(msg.sender, amount);\n        } \n        else \n        {\n            uint256 mintAmount = amount.mul(totalShares).div(totalRooted);\n            _mint(msg.sender, mintAmount);\n        }\n\n        rooted.transferFrom(msg.sender, address(this), amount);\n    }\n\n    // Unstake shares, claim back rooted\n    function unstake(uint256 share) public \n    {\n        uint256 totalShares = this.totalSupply();\n        uint256 unstakeAmount = share.mul(rooted.balanceOf(address(this))).div(totalShares);\n\n        _burn(msg.sender, share);\n        rooted.transfer(msg.sender, unstakeAmount);\n    }\n\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \n    { \n        return address(token) != address(this) && address(token) != address(rooted); \n    }\n}"
    },
    "contracts/test/ERC20Test.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"../ERC20.sol\";\n\ncontract ERC20Test is ERC20(\"Test\", \"TST\") \n{ \n    constructor()\n    {\n        _mint(msg.sender, 100 ether);\n    }\n}"
    },
    "contracts/test/LiquidityLockedERC20Test.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"../LiquidityLockedERC20.sol\";\n\ncontract LiquidityLockedERC20Test is LiquidityLockedERC20(\"test\", \"TEST\")\n{   \n    constructor()\n    {\n        _mint(msg.sender, 100 ether);\n    } \n}"
    },
    "contracts/test/MarketDistributionTest.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n\nimport \"../IERC20.sol\";\nimport \"../SafeERC20.sol\";\nimport \"../RootedToken.sol\";\nimport \"../IMarketDistribution.sol\";\nimport \"../IMarketGeneration.sol\";\n\ncontract MarketDistributionTest is IMarketDistribution\n{\n    using SafeERC20 for IERC20;\n\n    RootedToken immutable rootedToken;\n    IERC20 immutable baseToken;\n\n    mapping (address => uint256) public claimCallAmount;\n    mapping (address => uint256) public claimReferralRewardCallAmount;\n    bool public override distributionComplete;   \n    uint256 public override vestingPeriodStartTime;\n    uint256 public override vestingPeriodEndTime; \n    IMarketGeneration public marketGeneration; \n\n    constructor(RootedToken _rootedToken, IERC20 _baseToken)\n    {\n        rootedToken = _rootedToken;\n        baseToken = _baseToken;\n    }\n\n    function distribute() public override \n    { \n        require (!distributionComplete, \"Already complete\");\n        marketGeneration = IMarketGeneration(msg.sender);\n        distributionComplete = true;\n        baseToken.safeTransferFrom(msg.sender, address(this), baseToken.balanceOf(msg.sender));\n    }\n\n    function claim(address account) public override\n    {\n        require (distributionComplete, \"Not complete\");\n        claimCallAmount[account] = marketGeneration.contribution(account);\n    }\n\n    function claimReferralRewards(address account, uint256 referralShare) public override\n    {\n        require (distributionComplete, \"Not complete\");\n        claimReferralRewardCallAmount[account] = referralShare;\n    }\n}"
    },
    "contracts/test/TetherTest.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"../ERC20.sol\";\n\ncontract TetherTest is ERC20(\"Tether\", \"USDT\") \n{ \n    constructor()\n    {\n         decimals = 6;\n        _mint(msg.sender, 100 ** decimals);       \n    }\n}"
    },
    "contracts/test/WETH9.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"../IWETH.sol\";\nimport \"../IERC20.sol\";\nimport \"../IWrappedERC20Events.sol\";\n\ncontract WETH9 is IWETH, IERC20, IWrappedERC20Events\n{\n    string public override name     = \"Wrapped Ether\";\n    string public override symbol   = \"WETH\";\n    uint8  public override decimals = 18;\n\n    mapping (address => uint)                       public override balanceOf;\n    mapping (address => mapping (address => uint))  public override allowance;\n\n    receive() external payable {\n        deposit();\n    }\n    function deposit() public payable override {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad, \"weth a: not enough balance\");\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public override view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public override returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public override returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        override\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad, \"weth b: not enough balance\");\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad, \"weth c: not enough allowance\");\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}"
    },
    "contracts/TokensRecoverable.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nAllows recovery of unexpected tokens (airdrops, etc)\nInheriters can customize logic by overriding canRecoverTokens\n*/\n\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./Owned.sol\";\nimport \"./ITokensRecoverable.sol\";\n\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\n{\n    using SafeERC20 for IERC20;\n\n    function recoverTokens(IERC20 token) public override ownerOnly() \n    {\n        require (canRecoverTokens(token));\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\n    }\n\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \n    { \n        return address(token) != address(this); \n    }\n}"
    },
    "contracts/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.4;\n\nimport \"./IUniswapV2Pair.sol\";\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\nimport \"./TokensRecoverable.sol\";\nimport \"./IERC31337.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC20.sol\";\nimport \"./RootedTransferGate.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IVault.sol\";\nimport \"./IFloorCalculator.sol\";\n\ncontract Vault is TokensRecoverable, IVault\n{\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 immutable uniswapRouter;\n    IUniswapV2Factory immutable uniswapFactory;\n    IERC20 immutable rooted;\n    IERC20 immutable base;\n    IERC20 immutable usd;\n    IERC31337 immutable elite;\n    IERC20 rootedEliteLP;\n    IERC20 rootedBaseLP;\n    IERC20 rootedUsdLP;\n    IFloorCalculator public calculator;\n    RootedTransferGate public gate;\n    mapping(address => bool) public seniorVaultManager;\n\n    constructor(IERC20 _base, IERC20 _usd, IERC31337 _elite, IERC20 _rooted, IFloorCalculator _calculator, RootedTransferGate _gate, IUniswapV2Router02 _uniswapRouter) \n    {        \n        base = _base;\n        elite = _elite;\n        usd = _usd;\n        rooted = _rooted;\n        calculator = _calculator;\n        gate = _gate;\n        uniswapRouter = _uniswapRouter;\n        uniswapFactory = IUniswapV2Factory(_uniswapRouter.factory());\n        \n        _base.approve(address(_elite), uint256(-1));\n        _base.approve(address(_uniswapRouter), uint256(-1));\n        _rooted.approve(address(_uniswapRouter), uint256(-1));\n        _elite.approve(address(_uniswapRouter), uint256(-1));\n        _usd.approve(address(_uniswapRouter), uint256(-1));\n    }\n\n    function setupPools() public ownerOnly() {\n        rootedBaseLP = IERC20(uniswapFactory.getPair(address(base), address(rooted)));\n        rootedBaseLP.approve(address(uniswapRouter), uint256(-1));\n       \n        rootedEliteLP = IERC20(uniswapFactory.getPair(address(elite), address(rooted)));\n        rootedEliteLP.approve(address(uniswapRouter), uint256(-1));\n\n        rootedUsdLP = IERC20(uniswapFactory.getPair(address(usd), address(rooted)));\n        rootedUsdLP.approve(address(uniswapRouter), uint256(-1));\n    }\n\n    modifier seniorVaultManagerOnly()\n    {\n        require(seniorVaultManager[msg.sender], \"Not a Senior Vault Manager\");\n        _;\n    }\n\n    // Owner function to enable other contracts or addresses to use the Vault\n    function setSeniorVaultManager(address managerAddress, bool allow) public ownerOnly()\n    {\n        seniorVaultManager[managerAddress] = allow;\n    }\n\n    function setCalculatorAndGate(IFloorCalculator _calculator, RootedTransferGate _gate) public ownerOnly()\n    {\n        calculator = _calculator;\n        gate = _gate;\n    }\n\n    // Standard swaps with v2 router\n    function swap(uint amountIn, uint amountOutMin, address[] calldata path) public override seniorVaultManagerOnly() {\n        uniswapRouter.swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), block.timestamp);\n    }\n\n    function swapSupportingFee(uint amountIn, uint amountOutMin, address[] calldata path) public override seniorVaultManagerOnly() {\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), block.timestamp);\n    }\n\n    // Removes liquidity, buys from either pool, sets a temporary dump tax\n    function removeBuyAndTax(uint256 amount, uint256 minAmountOut, address token, uint16 tax, uint256 time) public override seniorVaultManagerOnly()\n    {\n        gate.setUnrestricted(true);\n        amount = removeLiq(token, amount);\n        buyRootedToken(token, amount, minAmountOut);\n        gate.setDumpTax(tax, time);\n        gate.setUnrestricted(false);\n    }\n\n    // Use Base tokens held by this contract to buy from the Base Pool and sell in the Elite Pool\n    function balancePriceBase(uint256 amount, uint256 minAmountOut) public override seniorVaultManagerOnly()\n    {\n        uint balance = base.balanceOf(address(this));\n        amount = buyRootedToken(address(base), amount, 0);\n        amount = sellRootedToken(address(elite), amount, minAmountOut);\n        elite.withdrawTokens(amount);\n        require(balance < base.balanceOf(address(this)));\n    }\n\n    // Use Base tokens held by this contract to buy from the Elite Pool and sell in the Base Pool\n    function balancePriceElite(uint256 amount, uint256 minAmountOut) public override seniorVaultManagerOnly()\n    {\n        uint balance = base.balanceOf(address(this));\n        elite.depositTokens(amount);\n        amount = buyRootedToken(address(elite), amount, 0);\n        amount = sellRootedToken(address(base), amount, minAmountOut);\n        require(balance < base.balanceOf(address(this)));\n    }\n\n    // Uses value in the controller to buy\n    function buyAndTax(address token, uint256 amountToSpend, uint256 minAmountOut, uint16 tax, uint256 time) public override seniorVaultManagerOnly()\n    {\n        buyRootedToken(token, amountToSpend, minAmountOut);\n        gate.setDumpTax(tax, time);\n    }\n\n    // Sweeps the Base token under the floor to this address\n    function sweepFloor() public override seniorVaultManagerOnly()\n    {\n        elite.sweepFloor(address(this));\n    }\n\n    function wrapToElite(uint256 baseAmount) public override seniorVaultManagerOnly() \n    {\n        elite.depositTokens(baseAmount);\n    }\n\n    function unwrapElite(uint256 eliteAmount) public override seniorVaultManagerOnly() \n    {\n        elite.withdrawTokens(eliteAmount);\n    }\n\n    function buyRooted(address token, uint256 amountToSpend, uint256 minAmountOut) public override seniorVaultManagerOnly()\n    {\n        buyRootedToken(token, amountToSpend, minAmountOut);\n    }\n\n    function sellRooted(address token, uint256 amountToSpend, uint256 minAmountOut) public override seniorVaultManagerOnly()\n    {\n        sellRootedToken(token, amountToSpend, minAmountOut);\n    }\n\n    function addLiquidity(address pairedToken, uint256 pairedAmount, uint256 rootedAmount, uint256 pairedAmountMin, uint256 rootedAmountMin) public override seniorVaultManagerOnly() \n    {\n        gate.setUnrestricted(true);\n        uniswapRouter.addLiquidity(address(pairedToken), address(rooted), pairedAmount, rootedAmount, pairedAmountMin, rootedAmountMin, address(this), block.timestamp);\n        gate.setUnrestricted(false);\n    }\n\n    function removeLiquidity(address pairedToken, uint256 lpTokens, uint256 pairedAmountMin, uint256 rootedAmountMin) public override seniorVaultManagerOnly()\n    {\n        gate.setUnrestricted(true);\n        uniswapRouter.removeLiquidity(address(pairedToken), address(rooted), lpTokens, pairedAmountMin, rootedAmountMin, address(this), block.timestamp);\n        gate.setUnrestricted(false);\n    }\n\n\n    // internal functions\n    function buyRootedToken(address token, uint256 amountToSpend, uint256 minAmountOut) internal returns (uint256)\n    {\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountToSpend, minAmountOut, buyPath(token), address(this), block.timestamp);\n        amountToSpend = amounts[1];\n        return amountToSpend;\n    }\n\n    function sellRootedToken(address token, uint256 amountToSpend, uint256 minAmountOut) internal returns (uint256)\n    {\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountToSpend, minAmountOut, sellPath(token), address(this), block.timestamp);\n        amountToSpend = amounts[1];\n        return amountToSpend;\n    }\n\n    function removeLiq(address eliteOrBase, uint256 tokens) internal returns (uint256)\n    {\n        (tokens, ) = uniswapRouter.removeLiquidity(address(eliteOrBase), address(rooted), tokens, 0, 0, address(this), block.timestamp);\n        return tokens;\n    }\n\n    function buyPath(address token) internal view returns (address[] memory) \n    {\n        address[] memory path = new address[](2);\n        path[0] = address(token);\n        path[1] = address(rooted);\n        return path;\n    }\n\n    function sellPath(address token) internal view returns (address[] memory) \n    {\n        address[] memory path = new address[](2);\n        path[0] = address(rooted);\n        path[1] = address(token);\n        return path;\n    }\n}"
    },
    "contracts/WrappedERC20.sol": {
      "content": "// SPDX-License-Identifier: U-U-U-UPPPPP!!!\npragma solidity ^0.7.6;\n\n/* ROOTKIT:\nWraps any ERC20\nSimilar to WETH except for ERC20 tokens instead of ETH\ndepositTokens/withdrawTokens are like deposit/withdraw in WETH\nInheriters can hook into depositTokens and withdrawTokens\nby overriding _beforeDepositTokens and _beforeWithdrawTokens\n*/\n\nimport \"./IERC20.sol\";\nimport \"./ERC20.sol\";\nimport \"./IWrappedERC20.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./SafeMath.sol\";\n\ncontract WrappedERC20 is ERC20, IWrappedERC20, TokensRecoverable\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    IERC20 public immutable override wrappedToken;\n\n    constructor (IERC20 _wrappedToken, string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {        \n        if (_wrappedToken.decimals() != 18) {\n            _setupDecimals(_wrappedToken.decimals());\n        }\n        wrappedToken = _wrappedToken;\n    }\n\n    function depositTokens(uint256 _amount) public override\n    {\n        _beforeDepositTokens(_amount);\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\n        _mint(msg.sender, received);\n        emit Deposit(msg.sender, _amount);\n    }\n\n    function withdrawTokens(uint256 _amount) public override\n    {\n        _beforeWithdrawTokens(_amount);\n        _burn(msg.sender, _amount);\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\n        wrappedToken.safeTransfer(msg.sender, _amount);\n        require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \"Transfer not exact\");\n        emit Withdrawal(msg.sender, _amount);\n    }\n\n    function canRecoverTokens(IERC20 token) internal virtual override view returns (bool) \n    {\n        return token != this && token != wrappedToken;\n    }\n\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\n    function _beforeWithdrawTokens(uint256 _amount) internal virtual view { }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}